const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const morgan = require('morgan');
const path = require('path');
const config = require('./config/config');

// –ò–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
const authRoutes = require('./routes/auth');
const userRoutes = require('./routes/user');
const gameRoutes = require('./routes/game');

// –ò–º–ø–æ—Ä—Ç middleware
const AuthMiddleware = require('./middleware/auth');
const SecurityMiddleware = require('./middleware/security');

class SmartFaceitServer {
    constructor() {
        this.app = express();
        this.port = config.PORT || 3000;
        this.initializeMiddleware();
        this.initializeRoutes();
        this.initializeErrorHandling();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middleware
    initializeMiddleware() {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        this.app.use(helmet({
            contentSecurityPolicy: false, // –£–ø—Ä–æ—â–∞–µ–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            crossOriginEmbedderPolicy: false
        }));

        // CORS
        this.app.use(cors({
            origin: true, // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            credentials: true,
            methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
            allowedHeaders: ['Content-Type', 'Authorization', 'X-CSRF-Token']
        }));

        // Rate limiting
        const limiter = rateLimit({
            windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
            max: 100, // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
            message: {
                error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
            },
            standardHeaders: true,
            legacyHeaders: false,
        });

        this.app.use('/api/', limiter);

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        this.app.use(morgan('combined'));

        // –ü–∞—Ä—Å–∏–Ω–≥ JSON
        this.app.use(express.json({ limit: '10mb' }));
        this.app.use(express.urlencoded({ extended: true, limit: '10mb' }));

        // –ö–∞—Å—Ç–æ–º–Ω—ã–µ middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        this.app.use(SecurityMiddleware.sanitizeInput);
        this.app.use(SecurityMiddleware.detectSQLInjection);
        this.app.use(SecurityMiddleware.detectXSS);

        // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        this.app.use('/uploads', express.static(path.join(__dirname, '../uploads')));
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
    initializeRoutes() {
        // Health check
        this.app.get('/api/health', (req, res) => {
            res.json({
                status: 'OK',
                timestamp: new Date().toISOString(),
                version: config.VERSION || '1.0.0',
                uptime: process.uptime()
            });
        });

        // API –º–∞—Ä—à—Ä—É—Ç—ã
        this.app.use('/api/auth', authRoutes);
        this.app.use('/api/users', AuthMiddleware.authenticate, userRoutes);
        this.app.use('/api/games', AuthMiddleware.authenticate, gameRoutes);

        // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        this.app.use(express.static(path.join(__dirname, '../frontend')));

        // SPA fallback
        this.app.get('*', (req, res) => {
            if (req.path.startsWith('/api')) {
                return res.status(404).json({ error: 'API endpoint not found' });
            }
            res.sendFile(path.join(__dirname, '../frontend/index.html'));
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    initializeErrorHandling() {
        // 404 –¥–ª—è API
        this.app.use('/api/*', (req, res) => {
            res.status(404).json({
                error: 'Endpoint not found',
                path: req.path,
                method: req.method
            });
        });

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        this.app.use((error, req, res, next) => {
            console.error('Server Error:', error);

            let statusCode = 500;
            let message = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';

            if (error.name === 'ValidationError') {
                statusCode = 400;
                message = '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö';
            } else if (error.name === 'UnauthorizedError') {
                statusCode = 401;
                message = '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø';
            } else if (error.message === 'Invalid JSON') {
                statusCode = 400;
                message = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON';
            }

            res.status(statusCode).json({
                error: message,
                ...(config.NODE_ENV === 'development' && {
                    details: error.message,
                    stack: error.stack
                })
            });
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        process.on('uncaughtException', (error) => {
            console.error('Uncaught Exception:', error);
            this.gracefulShutdown();
        });

        process.on('unhandledRejection', (reason, promise) => {
            console.error('Unhandled Rejection at:', promise, 'reason:', reason);
            this.gracefulShutdown();
        });
    }

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    start() {
        this.server = this.app.listen(this.port, () => {
            console.log(`üöÄ Smart Faceit Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.port}`);
            console.log(`üìù –†–µ–∂–∏–º: ${config.NODE_ENV}`);
            console.log(`üåê API: http://localhost:${this.port}/api`);
            console.log(`üéÆ Frontend: http://localhost:${this.port}`);
            console.log(`üíö Health check: http://localhost:${this.port}/api/health`);
        });

        // Graceful shutdown
        process.on('SIGTERM', () => this.gracefulShutdown());
        process.on('SIGINT', () => this.gracefulShutdown());
    }

    // Graceful shutdown
    gracefulShutdown() {
        console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞...');

        if (this.server) {
            this.server.close(() => {
                console.log('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                process.exit(0);
            });

            setTimeout(() => {
                console.error('‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
                process.exit(1);
            }, 10000);
        } else {
            process.exit(0);
        }
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = new SmartFaceitServer();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
module.exports = server;

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    server.start();
}