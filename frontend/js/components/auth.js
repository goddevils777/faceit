// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
class AuthComponent {
    constructor() {
        this.container = null;
        this.currentForm = 'register'; // 'register' –∏–ª–∏ 'login'
        this.isLoading = false;
        this.rateLimiter = SecurityUtils.createRateLimiter(5, 60000); // 5 –ø–æ–ø—ã—Ç–æ–∫ –≤ –º–∏–Ω—É—Ç—É
    }

    // –†–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    async render() {
        this.container = document.querySelector('#app') || document.body;
        this.container.innerHTML = '';
        
        const authHTML = this.getAuthHTML();
        this.container.innerHTML = authHTML;
        
        this.bindEvents();
        this.showForm(this.currentForm);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    getAuthHTML() {
        return `
            <div class="auth-wrapper">
                <div class="auth-container">
                    <div class="auth-header">
                        <h1 class="auth-logo">Smart Faceit</h1>
                        <p class="auth-subtitle">–ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞</p>
                    </div>

                    <div class="auth-tabs">
                        <button class="auth-tab ${this.currentForm === 'register' ? 'active' : ''}" 
                                data-form="register">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</button>
                        <button class="auth-tab ${this.currentForm === 'login' ? 'active' : ''}" 
                                data-form="login">–í—Ö–æ–¥</button>
                    </div>

                    <div class="social-auth">
                        <button class="social-button google-btn" data-provider="google">
                            <img src="frontend/assets/images/google-logo.png" alt="Google" class="social-logo">
                            <span>Google</span>
                        </button>
                        <button class="social-button vk-btn" data-provider="vk">
                            <img src="frontend/assets/images/vk-logo.png" alt="VK" class="social-logo">
                            <span>VKontakte</span>
                        </button>
                    </div>

                    <div class="auth-divider">
                        <span>–∏–ª–∏</span>
                    </div>

                    <div class="auth-form-container">
                        <form class="auth-form" id="auth-form" autocomplete="off">
                            <!-- –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                        </form>
                    </div>

                    <div class="auth-links">
                        <a href="#" class="forgot-password" id="forgot-password">–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?</a>
                        <a href="#" class="back-link" data-route="/">‚Üê –ù–∞–∑–∞–¥ –∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É</a>
                    </div>

                    <div class="auth-footer">
                        <p class="terms-text">
                            –ü—Ä–æ–¥–æ–ª–∂–∞—è, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å 
                            <a href="#" class="terms-link">—É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</a> –∏ 
                            <a href="#" class="privacy-link">–ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>
                        </p>
                    </div>
                </div>

                <!-- –õ–æ–∞–¥–µ—Ä -->
                <div class="auth-loader hidden" id="auth-loader">
                    <div class="loader"></div>
                    <p>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...</p>
                </div>
            </div>
        `;
    }

    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    bindEvents() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–∞–±–∞–º–∏
        const tabs = document.querySelectorAll('.auth-tab');
        tabs.forEach(tab => {
            tab.addEventListener('click', (e) => {
                const formType = e.target.dataset.form;
                this.switchForm(formType);
            });
        });

        // –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        const socialButtons = document.querySelectorAll('.social-button');
        socialButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                e.preventDefault();
                const provider = e.currentTarget.dataset.provider;
                this.handleSocialAuth(provider);
            });
        });

        // –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å
        const forgotPassword = document.getElementById('forgot-password');
        forgotPassword.addEventListener('click', (e) => {
            e.preventDefault();
            this.handleForgotPassword();
        });

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
        const form = document.getElementById('auth-form');
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleFormSubmit();
        });
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
    switchForm(formType) {
        if (this.isLoading) return;
        
        this.currentForm = formType;
        this.updateTabs();
        this.showForm(formType);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–±–∞
    updateTabs() {
        const tabs = document.querySelectorAll('.auth-tab');
        tabs.forEach(tab => {
            const isActive = tab.dataset.form === this.currentForm;
            tab.classList.toggle('active', isActive);
        });
    }

    // –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã
    showForm(formType) {
        const formContainer = document.getElementById('auth-form');
        
        if (formType === 'register') {
            formContainer.innerHTML = this.getRegisterFormHTML();
        } else {
            formContainer.innerHTML = this.getLoginFormHTML();
        }

        this.bindFormEvents();
    }

    // HTML —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    getRegisterFormHTML() {
        return `
            <div class="form-group">
                <input type="text" 
                       class="form-input" 
                       id="username" 
                       name="username"
                       placeholder="–í–∞—à –Ω–∏–∫–Ω–µ–π–º" 
                       maxlength="20" 
                       required
                       autocomplete="username">
                <div class="input-error" id="username-error"></div>
            </div>

            <div class="form-group">
                <input type="email" 
                       class="form-input" 
                       id="email" 
                       name="email"
                       placeholder="–í–∞—à Email" 
                       required
                       autocomplete="email">
                <div class="input-error" id="email-error"></div>
            </div>

            <div class="form-group">
                <div class="password-container">
                    <input type="password" 
                           class="form-input" 
                           id="password" 
                           name="password"
                           placeholder="–í–∞—à –ø–∞—Ä–æ–ª—å" 
                           minlength="6" 
                           required
                           autocomplete="new-password">
                    <button type="button" class="password-toggle" id="password-toggle">
                        üëÅÔ∏è
                    </button>
                </div>
                <div class="password-strength" id="password-strength"></div>
                <div class="input-error" id="password-error"></div>
            </div>

            <div class="form-group">
                <select class="form-input region-select" id="region" name="region" required>
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω</option>
                    ${CONFIG.GAME.REGIONS.map(region => 
                        `<option value="${region}">${this.getRegionName(region)}</option>`
                    ).join('')}
                </select>
                <div class="input-error" id="region-error"></div>
            </div>

            <button type="submit" class="btn btn-primary auth-submit-btn" id="submit-btn">
                –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            </button>
        `;
    }

    // HTML —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
    getLoginFormHTML() {
        return `
            <div class="form-group">
                <input type="text" 
                       class="form-input" 
                       id="login" 
                       name="login"
                       placeholder="Email –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º" 
                       required
                       autocomplete="username">
                <div class="input-error" id="login-error"></div>
            </div>

            <div class="form-group">
                <div class="password-container">
                    <input type="password" 
                           class="form-input" 
                           id="password" 
                           name="password"
                           placeholder="–í–∞—à –ø–∞—Ä–æ–ª—å" 
                           required
                           autocomplete="current-password">
                    <button type="button" class="password-toggle" id="password-toggle">
                        üëÅÔ∏è
                    </button>
                </div>
                <div class="input-error" id="password-error"></div>
            </div>

            <div class="form-group">
                <label class="checkbox-container">
                    <input type="checkbox" id="remember" name="remember">
                    <span class="checkmark"></span>
                    –ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è
                </label>
            </div>

            <button type="submit" class="btn btn-primary auth-submit-btn" id="submit-btn">
                –í–æ–π—Ç–∏
            </button>
        `;
    }

    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ñ–æ—Ä–º—ã
    bindFormEvents() {
        // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä–æ–ª—è
        const passwordToggle = document.getElementById('password-toggle');
        if (passwordToggle) {
            passwordToggle.addEventListener('click', this.togglePassword);
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        const inputs = document.querySelectorAll('.form-input');
        inputs.forEach(input => {
            input.addEventListener('blur', (e) => this.validateField(e.target));
            input.addEventListener('input', (e) => this.clearFieldError(e.target));
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if (this.currentForm === 'register') {
            const passwordInput = document.getElementById('password');
            passwordInput.addEventListener('input', (e) => this.updatePasswordStrength(e.target.value));
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
    togglePassword() {
        const passwordInput = document.getElementById('password');
        const toggle = document.getElementById('password-toggle');
        
        if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggle.textContent = 'üôà';
        } else {
            passwordInput.type = 'password';
            toggle.textContent = 'üëÅÔ∏è';
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è
    updatePasswordStrength(password) {
        const strengthContainer = document.getElementById('password-strength');
        if (!strengthContainer) return;

        const strength = SecurityUtils.getPasswordStrength(password);
        const strengthLevels = ['–û—á–µ–Ω—å —Å–ª–∞–±—ã–π', '–°–ª–∞–±—ã–π', '–°—Ä–µ–¥–Ω–∏–π', '–•–æ—Ä–æ—à–∏–π', '–û—Ç–ª–∏—á–Ω—ã–π'];
        const strengthColors = ['#ff4757', '#ff6348', '#ffa502', '#2ed573', '#1dd1a1'];

        strengthContainer.innerHTML = `
            <div class="strength-bar">
                <div class="strength-fill" style="width: ${strength * 20}%; background: ${strengthColors[strength - 1] || '#ff4757'}"></div>
            </div>
            <span class="strength-text">${strengthLevels[strength - 1] || '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'}</span>
        `;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—è
    validateField(field) {
        const fieldName = field.name;
        const value = field.value.trim();
        let validation;

        switch (fieldName) {
            case 'username':
                validation = ValidationUtils.validateUsername(value);
                break;
            case 'email':
                validation = ValidationUtils.validateEmail(value);
                break;
            case 'password':
                validation = ValidationUtils.validatePassword(value);
                break;
            case 'region':
                validation = ValidationUtils.validateRegion(value);
                break;
            case 'login':
                validation = { valid: !!value, error: value ? null : '–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' };
                break;
            default:
                return;
        }

        this.showFieldError(field, validation.valid ? null : validation.error);
        return validation.valid;
    }

    // –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –ø–æ–ª—è
    showFieldError(field, error) {
        const errorContainer = document.getElementById(`${field.name}-error`);
        if (errorContainer) {
            errorContainer.textContent = error || '';
            field.classList.toggle('error', !!error);
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ–ª—è
    clearFieldError(field) {
        this.showFieldError(field, null);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    async handleFormSubmit() {
        if (this.isLoading) return;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
        const userIP = 'user_ip'; // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞—Ç—å IP
        if (!this.rateLimiter(userIP)) {
            app.showError('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            return;
        }

        const formData = this.getFormData();
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
        const validation = this.currentForm === 'register' 
            ? ValidationUtils.validateRegistrationForm(formData)
            : ValidationUtils.validateLoginForm(formData);

        if (!validation.valid) {
            validation.errors.forEach(error => app.showError(error));
            return;
        }

        this.setLoading(true);

        try {
            let result;
            
            if (this.currentForm === 'register') {
                result = await AuthService.register(formData);
            } else {
                result = await AuthService.login(formData);
            }

            if (result.success) {
                app.showSuccess(this.currentForm === 'register' ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!' : '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!');
                
                // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                setTimeout(() => {
                    router.navigate('/main');
                }, 1000);
            } else {
                app.showError(result.error);
            }
            
        } catch (error) {
            console.error('Auth error:', error);
            app.showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        } finally {
            this.setLoading(false);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
    getFormData() {
        const form = document.getElementById('auth-form');
        const formData = new FormData(form);
        const data = {};

        for (let [key, value] of formData.entries()) {
            data[key] = SecurityUtils.sanitizeHTML(value.trim());
        }

        return data;
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    setLoading(loading) {
        this.isLoading = loading;
        const loader = document.getElementById('auth-loader');
        const submitBtn = document.getElementById('submit-btn');
        
        if (loader) {
            loader.classList.toggle('hidden', !loading);
        }
        
        if (submitBtn) {
            submitBtn.disabled = loading;
            submitBtn.textContent = loading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : 
                (this.currentForm === 'register' ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' : '–í–æ–π—Ç–∏');
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    async handleSocialAuth(provider) {
        try {
            app.showNotification(`–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ ${provider}...`, 'info');
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OAuth –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
            
            // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            setTimeout(() => {
                app.showError('–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            }, 1000);
            
        } catch (error) {
            console.error('Social auth error:', error);
            app.showError('–û—à–∏–±–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    handleForgotPassword() {
        app.showNotification('–§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', 'info');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞
    getRegionName(region) {
        const regionNames = {
            asia: '–ê–∑–∏—è',
            russia: '–†–æ—Å—Å–∏—è',
            europe: '–ï–≤—Ä–æ–ø–∞',
            usa: '–°–®–ê',
            brazil: '–ë—Ä–∞–∑–∏–ª–∏—è',
            australia: '–ê–≤—Å—Ç—Ä–∞–ª–∏—è'
        };
        
        return regionNames[region] || region;
    }

    // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    destroy() {
        if (this.container) {
            this.container.innerHTML = '';
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
window.AuthComponent = AuthComponent;